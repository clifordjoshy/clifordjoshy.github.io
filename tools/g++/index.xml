<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>G++ - tool - clifpage</title><link>http://cliford.net/tools/g++/</link><description>G++ - tool - clifpage</description><generator>Hugo -- gohugo.io</generator><language>en-in</language><lastBuildDate>Wed, 09 Dec 2020 17:40:49 +0530</lastBuildDate><atom:link href="http://cliford.net/tools/g++/" rel="self" type="application/rss+xml"/><item><title>Minimax Chess Bot and GUI</title><link>http://cliford.net/projects/chess-bot/</link><pubDate>Wed, 09 Dec 2020 17:40:49 +0530</pubDate><author>Author</author><guid>http://cliford.net/projects/chess-bot/</guid><description><![CDATA[<h2 id="links">Links</h2>
<p><a href="https://github.com/clifordjoshy/minimax-chess-py" target="_blank" rel="noopener noreffer" style="white-space:nowrap;"><i class="fa-icon fa-brands fa-github" aria-hidden="true"></i>&nbsp;GitHub - Python Version</a>
â€ƒ
<a href="https://github.com/clifordjoshy/minimax-chess-cpp" target="_blank" rel="noopener noreffer" style="white-space:nowrap;"><i class="fa-icon fa-brands fa-github" aria-hidden="true"></i>&nbsp;GitHub - C&#43;&#43; Version</a>
</p>
<h2 id="about">About</h2>
<p>This is my implementation of a single-player chess game using the minimax algorithm (which is an algorithm that can be used to generate optimal solutions for a zero-sum two player game) with alpha-beta pruning. A GUI was also written to make use of the bot and provide a single-player chess game experience.</p>
<p>There were two separate implementations that I did.</p>]]></description></item></channel></rss>