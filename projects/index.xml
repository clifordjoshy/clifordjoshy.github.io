<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on clifpage</title><link>http://cliford.net/projects/</link><description>Recent content in Projects on clifpage</description><generator>Hugo</generator><language>en-in</language><managingEditor>reach@cliford.net (Cliford)</managingEditor><webMaster>reach@cliford.net (Cliford)</webMaster><lastBuildDate>Sun, 30 Jun 2024 23:14:17 +0530</lastBuildDate><atom:link href="http://cliford.net/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>NITCbase - a toy RDBMS</title><link>http://cliford.net/projects/nitcbase/</link><pubDate>Sun, 07 May 2023 15:21:50 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/nitcbase/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/NITCbase" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub&lt;/a>
 
&lt;a href="https://nitcbase.github.io" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-solid fa-globe" aria-hidden="true">&lt;/i>&amp;nbsp;Website&lt;/a>
&lt;/p>
&lt;h2 id="about">About&lt;/h2>
&lt;p>NITCbase is a course aimed at an undergraduate student that guides them through the implementation of an elementary RDBMS. The database is designed to have 8 layers covered top-down as follows:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Frontend Interface&lt;/strong>: This layer interacts with the user, and translates high level SQL-like queries from the user into calls to appropriate methods of the lower layers.&lt;/li>
&lt;li>&lt;strong>Schema Layer&lt;/strong>: All DDL (Data Definition Language) commands of NITCbase - such as commands for creating, deleting, opening, closing and renaming relations; commands for renaming attributes of a relation and so on - are directed to this layer.&lt;/li>
&lt;li>&lt;strong>Algebra Layer&lt;/strong>: All DML (Data Manipulation Language) commands of NITCbase - insert, select, project and join - are directed to this layer.&lt;/li>
&lt;li>&lt;strong>Block Access Layer&lt;/strong>: This layer implements a lot of the common logic used for the implementation of various functionality in the higher layers. It handles core functionality like searching through a disk block, inserting values into a disk block and so on.&lt;/li>
&lt;li>&lt;strong>B+ Tree Layer&lt;/strong>: This layer handles relation indexing operations using B+ trees. The implementation of all B+ tree operations are handled in this layer and an abstraction is made available to higher layers.&lt;/li>
&lt;li>&lt;strong>Cache Layer&lt;/strong>: This layer implements the run time memory data structures associated with &lt;em>open&lt;/em> relations of the database.&lt;/li>
&lt;li>&lt;strong>Buffer Layer&lt;/strong>: This layer is used for buffered access to the disk. All higher layers access the disk through this layer. An LRU buffer of disk blocks is maintained in memory to optimise the disk access operations in the database.&lt;/li>
&lt;li>&lt;strong>Physical Layer&lt;/strong>: This layer serves as an abstraction to handle low-level disk operations and makes available methods to read and write into disk blocks.&lt;/li>
&lt;/ol>
&lt;p>The project features a &lt;a href="https://nitcbase.github.io/docs/Roadmap" target="_blank" rel="noopener noreffer ">roadmap&lt;/a> which divides the implementation into logical stages and explains the necessary theory required for the implementation at each stage. Further details about the design can be found &lt;a href="https://nitcbase.github.io/docs/Design/Architecture" target="_blank" rel="noopener noreffer ">here&lt;/a>.&lt;/p></description></item><item><title>Tathva/Ragam Backends</title><link>http://cliford.net/projects/tathva-ragam-backends/</link><pubDate>Sun, 01 May 2022 13:23:40 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/tathva-ragam-backends/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/clifordjoshy/ragam21-backend" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub - Ragam21&lt;/a>
 
&lt;a href="https://github.com/clifordjoshy/tathva20-backend" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub - Tathva20&lt;/a>
 
&lt;a href="https://github.com/Ragam22/backend" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub - Ragam22&lt;/a>
&lt;/p>
&lt;h2 id="about">About&lt;/h2>
&lt;p>I was involved in the tech teams of our college fests, Ragam and Tathva. Ragam'21 and Tathva'20 were conducted online and required a REST API capable of handling event registrations, submissions, payments, team management and other event-specific requirements.&lt;/p>
&lt;p>Ragam'22 was (finally) offline and had a completely different set of requirements on top of the pre-existing design. It required the verification of attendees at the venues and events, hostel allocation, special registration conditions and the addition of an admin API.&lt;/p></description></item><item><title>Toy Compiler in Haskell</title><link>http://cliford.net/projects/toy-compiler/</link><pubDate>Tue, 29 Mar 2022 17:51:02 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/toy-compiler/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/clifordjoshy/expl-compilerlab" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub&lt;/a>
 
&lt;a href="https://silcnitc.github.io/" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-solid fa-book" aria-hidden="true">&lt;/i>&amp;nbsp;eXPL Docs&lt;/a>
 &lt;/p>
&lt;h2 id="about">About&lt;/h2>
&lt;p>This is a toy compiler for ExpL(Experimental Language) done as part of the Compiler Laboratory course I took in college.&lt;/p>
&lt;p>The compiler was written in Haskell using the &lt;a href="https://www.haskell.org/alex/" target="_blank" rel="noopener noreffer ">Alex&lt;/a> lexer and &lt;a href="https://www.haskell.org/happy/" target="_blank" rel="noopener noreffer ">Happy&lt;/a> parser.&lt;/p>
&lt;p>It compiles the source language ExpL(spec &lt;a href="https://silcnitc.github.io/expl.html" target="_blank" rel="noopener noreffer ">here&lt;/a> and &lt;a href="https://silcnitc.github.io/oexpl-specification.html" target="_blank" rel="noopener noreffer ">here&lt;/a>) to the low-level XSM (eXperimental String Machine) machine code (ABI &lt;a href="https://silcnitc.github.io/abi.html" target="_blank" rel="noopener noreffer ">here&lt;/a>) which runs on ExpOS (Experimental Operating System) a simulator for which can be found &lt;a href="https://silcnitc.github.io/install.html#navxsm" target="_blank" rel="noopener noreffer ">here&lt;/a>.&lt;/p></description></item><item><title>Rubik's Cube Solver</title><link>http://cliford.net/projects/rubiks-cube-solver/</link><pubDate>Fri, 01 Oct 2021 17:50:33 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/rubiks-cube-solver/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/clifordjoshy/thistlethwaite-rubiks" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub&lt;/a>
 
&lt;a href="https://www.jaapsch.net/puzzles/thistle.htm" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-solid fa-book" aria-hidden="true">&lt;/i>&amp;nbsp;Thisthlethwaite Algorithm Reference&lt;/a>
&lt;/p>
&lt;h2 id="about">About&lt;/h2>
&lt;p>My implementation of a Rubik&amp;rsquo;s cube solver using the Thisthlethwaite algorithm. A solution can be found for any shuffled state in 45 moves or less.&lt;/p>
&lt;p>The algorithm works by splitting the solving into various stages such that&lt;/p>
&lt;ul>
&lt;li>each stage only uses a subset of the possible moves&lt;/li>
&lt;li>moves used in a stage will not be needed in any subsequent stages&lt;/li>
&lt;/ul>
&lt;p>With the above restrictions, an &lt;a href="https://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search" target="_blank" rel="noopener noreffer ">iterative deepening depth-first search&lt;/a> is conducted on the state space until a solution is obtained.&lt;/p></description></item><item><title>Rajpath Recalls - an android app</title><link>http://cliford.net/projects/rajpath-recalls/</link><pubDate>Sat, 06 Mar 2021 10:34:16 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/rajpath-recalls/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/rajpathrecalls/RajpathRecallsApp" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub&lt;/a>
 
&lt;a href="https://play.google.com/store/apps/details?id=com.nitc.rajpathrecalls" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-google-play" aria-hidden="true">&lt;/i>&amp;nbsp;Google Play Store&lt;/a>
 
&lt;a href="https://rajpathrecalls.web.app" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-solid fa-globe" aria-hidden="true">&lt;/i>&amp;nbsp;Website(Deprecated)&lt;/a>
&lt;/p>
&lt;h2 id="about">About&lt;/h2>
&lt;p>A native android app made I built for our college radio. The app fetches a livestream and plays it showing the current playing track/program. The user is allowed to pause and subsequently sync back to the live stream as required.&lt;/p>
&lt;p>The app also features a live chat with all active users, and a means to see the schedule of programs happening at any given day. Both of these features were implemented using the Realtime Database feature of Firebase.&lt;/p></description></item><item><title>Minimax Chess Bot and GUI</title><link>http://cliford.net/projects/chess-bot/</link><pubDate>Wed, 09 Dec 2020 17:40:49 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/chess-bot/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/clifordjoshy/minimax-chess-py" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub - Python Version&lt;/a>
 
&lt;a href="https://github.com/clifordjoshy/minimax-chess-cpp" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub - C&amp;#43;&amp;#43; Version&lt;/a>
&lt;/p>
&lt;h2 id="about">About&lt;/h2>
&lt;p>This is my implementation of a single-player chess game using the minimax algorithm (which is an algorithm that can be used to generate optimal solutions for a zero-sum two player game) with alpha-beta pruning. A GUI was also written to make use of the bot and provide a single-player chess game experience.&lt;/p>
&lt;p>There were two separate implementations that I did.&lt;/p></description></item><item><title>Attentrack - an android app</title><link>http://cliford.net/projects/attentrack/</link><pubDate>Sat, 19 Sep 2020 19:05:38 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/attentrack/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/clifordjoshy/attentrack" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub&lt;/a>
 
&lt;a href="https://play.google.com/store/apps/details?id=com.leap.attentrack" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-google-play" aria-hidden="true">&lt;/i>&amp;nbsp;Google Play Store&lt;/a>
&lt;/p>
&lt;h2 id="about">About&lt;/h2>
&lt;p>A native android app made in Java using Android Studio. It allows you to add your subjects, and course details and with that calculates how many classes you can miss in a particular semester. You can mark all the classes you&amp;rsquo;ve missed and the app keep tracks of your attendance for you.&lt;/p>
&lt;p>Additionally, you can also add in your assignments and submissions to be reminded of your due dates and such.&lt;/p></description></item><item><title>LeapRGB - a custom built led panel</title><link>http://cliford.net/projects/leaprgb/</link><pubDate>Thu, 30 Jul 2020 23:56:35 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/leaprgb/</guid><description>&lt;data id="id-1" data-raw>&lt;/data>
&lt;h2 id="links">Links&lt;/h2>
&lt;a href="https://github.com/clifordjoshy/LeapRGB" target="_blank" rel="noopener noreffer" style="white-space:nowrap;">&lt;i class="fa-icon fa-brands fa-github" aria-hidden="true">&lt;/i>&amp;nbsp;GitHub&lt;/a>

&lt;h2 id="about">About&lt;/h2>
&lt;h3 id="the-thing">The Thing&lt;/h3>
&lt;p>A 16x15 grid of WS2811 LEDs, a 15W power supply and a NodeMCU. Serves as a clock, an arcade (with a bunch of classic games like Snake, Tetris, Pong and Flood-It!) and a music visualizer all controllable from an Android app.&lt;/p>
&lt;p>By default, it starts in the clock mode, which fetches time using NTP and displays it (pictured above). There&amp;rsquo;s a button on the side which allows you to switch to the app controlled mode.&lt;/p></description></item></channel></rss>