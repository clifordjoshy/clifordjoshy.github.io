<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Portfolio</title><link>http://cliford.net/projects/</link><description>Recent content in Projects on Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en-in</language><managingEditor>reach@cliford.net (Cliford)</managingEditor><webMaster>reach@cliford.net (Cliford)</webMaster><lastBuildDate>Tue, 29 Mar 2022 17:51:02 +0530</lastBuildDate><atom:link href="http://cliford.net/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Toy Compiler in Haskell</title><link>http://cliford.net/projects/toy-compiler/</link><pubDate>Tue, 29 Mar 2022 17:51:02 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/toy-compiler/</guid><description>Links :(fa-icon fa-brands fa-github): GitHub :(fa-icon fa-solid fa-book): eXPL Docs
About This is a toy compiler for ExpL(Experimental Language) done as part of the Compiler Laboratory course I took in college.
The compiler was written in Haskell using the Alex lexer and Happy parser.
It compiles the source language ExpL(spec here and here) to the low-level XSM (eXperimental String Machine) machine code (ABI here) which runs on ExpOS (Experimental Operating System) a simulator for which can be found here.</description></item><item><title>Rubiks Cube Solver</title><link>http://cliford.net/projects/rubiks-cube-solver/</link><pubDate>Fri, 01 Oct 2021 17:50:33 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/rubiks-cube-solver/</guid><description>Links :(fa-icon fa-brands fa-github): GitHub :(fa-icon fa-solid fa-book): Thisthlethwaite Algorithm Reference
About My implementation of a Rubik&amp;rsquo;s cube solver using the Thisthlethwaite algorithm. A solution can be found for any shuffled state in 45 moves or less.
The algorithm works by splitting the solving into various stages such that
each stage only uses a subset of the possible moves moves used in a stage will not be needed in any subsequent stages With the above restrictions, an iterative deepening depth-first search is conducted on the state space until a solution is obtained.</description></item><item><title>Minimax Chess Bot and GUI</title><link>http://cliford.net/projects/chess-bot/</link><pubDate>Wed, 09 Dec 2020 17:40:49 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/chess-bot/</guid><description>Links :(fa-icon fa-brands fa-github): GitHub - Python Version :(fa-icon fa-brands fa-github): GitHub - C++ Version
About This is my implementation of a single-player chess game using the minimax algorithm (which is an algorithm that can be used to generate optimal solutions for a zero-sum two player game) with alpha-beta pruning. A GUI was also written to make use of the bot and provide a single-player chess game experience.
There were two separate implementations that I did.</description></item><item><title>Attentrack - an android app</title><link>http://cliford.net/projects/attentrack/</link><pubDate>Sat, 19 Sep 2020 19:05:38 +0530</pubDate><author>reach@cliford.net (Cliford)</author><guid>http://cliford.net/projects/attentrack/</guid><description>Links :(fa-icon fa-brands fa-github): GitHub :(fa-icon fa-brands fa-google-play): Google Play Store
About A native android app made in Java using Android Studio. It allows you to add your subjects, and course details and with that calculates how many classes you can miss in a particular semester. You can mark all the classes you&amp;rsquo;ve missed and the app keep tracks of your attendance for you.
Additionally, you can also add in your assignments and submissions to be reminded of your due dates and such.</description></item></channel></rss>